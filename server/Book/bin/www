#!/usr/bin/env node

/**
 * Module dependencies.
 */

var door = require('../door');
var debug = require('debug')('book:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
door.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(door);
var socket = require('socket.io')(server);
global.sockets = new Map();
global.userInfo = [];
global.electron = null;
socket.on('connection', (client) => {
  console.log('new client connected');
  client.on('system_info', (args) => {
      console.log(args);
      saveUserInfo(client, args);
      if (global.electron) {
        global.electron.emit('refresh');
      }
    })
    .on("disconnect", (reason) => {
      if (global.electron) {
        global.electron.emit('refresh');
      }
      console.log(`disconnect ${reason}`);
      console.log("need delete device:" + client.id);
      global.sockets.delete(client.id);
      for (i = 0; i < global.userInfo.length; i++) {
        let jsonObject = JSON.parse(global.userInfo[i]);
        console.log(jsonObject.detail.devicesID === client.id);
        if (jsonObject.detail.devicesID === client.id) {
          global.userInfo.splice(i, 1);
        }
      }
      console.log(global.userInfo);
    })
    .on('disconnecting', (reson) => {
      console.log("disconnecting");

    })
    .on("electron client connected", (data) => {
      console.log("electron client connected");
      global.electron = client;
    })
  var datas = ["hc", "\"name\":\"12\""];
  client.emit("cmd", datas);
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

function saveUserInfo(socket, data) {
  let userInfo = JSON.parse(data); //each clients userInfo
  let userMap = new Map();
  userMap.set('detail', userInfo);
  global.userInfo.push(_mapToJson(userMap));
  global.sockets.set(socket.id, socket);
}

function strMapToObj(strMap) {
  let obj = Object.create(null);
  for (let [k, v] of strMap) {
    obj[k] = v;
  }
  return obj;
}
/**
 *map转换为json
 */
function _mapToJson(map) {
  return JSON.stringify(strMapToObj(map));
}